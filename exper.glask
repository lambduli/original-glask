module Main where
{ infixl 5 +
; infixl 5 *

; int'id :: Int -> Int
; int'id i = i

; maybe :: Maybe a -> a -> a
; maybe (Just x) _ = x
; maybe Nothing y  = y

; class Num a where
  { (+) :: a -> a -> a
  ; (*) :: a -> a -> a }

; instance Num Int where
  { (+) x y = int#+ (x, y)
  ; (*) x y = int#* (x, y) }

; hmmm = 23 + 42

-- ; instance Num Double where
--   { (+) x y = double#+ (x, y)
--   ; (*) x y = double#* (x, y) }

; data Maybe a = Just a | Nothing

; data Bool = True | False

-- ; instance Num a => Num (Maybe a) where
--   { (+) (Just n) (Just m) = Just (n + m)
--   ; (*) (Just n) (Just m) = Just (n * m) }

; numberino :: a -> Int
; numberino _ = int#+ (23, 42)

; testing :: a -> Bool
; testing _ = True

; example :: Int
; example = 23 + 42

-- klic je to trignout u explicitnich funkci taky
-- tenhle example to presne trigne
-- ; fobar :: Num a => Maybe a -> a
-- ; fobar (Just n) = n + n

-- ; overloaded :: Num a => a -> a
-- ; overloaded a = a
-- 
-- ; foo n = let { r = overloaded n
--               ; m = int'id n }
--           in  r
}
