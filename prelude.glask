module Main where
{ 
  class Num a

; instance Num Int
; instance Num Double


; class Fractional a

; instance Fractional Double


; data Maybe a = Nothing | Just a

; data Record a = Rec { a :: Int, b :: Maybe a }


-- ; class Bar b

; class () => Foo a where
  { foo :: a -> b -> a
  -- ; foo x y = x
  ; bar :: (a -> b) -> a -> b
  }

-- ; instance (Show a) => Baz ([] a) where
-- { baz = 23 :: a }
  
-- ; type Foo = Int -- Type Aliases/Synonym expansion is not implemented yet
  
; int = 23 -- I have fixed the bug manifesting for this declaration
; double = 23.7

; expl :: Double
; expl = 23

; lambda = \ a b c -> c


; require :: Num a => a -> a
; require = \ x -> x

; ok = require 23

-- ; not'ok = require 'a'

}
