module Main where
{ class Num a
; instance Num Int
; instance Num Double
  
; class Test a where
  { test :: a -> a -> a }

-- this used to break down for the let zzz
-- because when predicates contain skolems, it needs to correctly split them too
--
-- ; foo :: Test a => a -> a -> ()
-- ; foo a a' =
--     let { zzz :: x -> x
--         ; zzz o = let { q = test a a' } in o }
--   in ()

-- this is the same problem
--
--
; foo :: Test (m a) => m a -> m a -> ()
; foo a a' =
    let { zzz :: x -> x
        ; zzz o = let { q = test a a' } in o }
  in ()


-- this whole file illustrates the limiations of my current "placeholder elimination" approach
-- because I do eliminate going from the bottom up
-- when I try to eliminate the most nested let's placeholder
-- the corresponding Test dictionary is not in the scope yet

-- I am pretty sure the future, beter approach
-- which works like this:
-- AST ---> Typed AST ---eliminate placeholders/desugar overloadings---> Simple AST


-- the important part is - the new split'
-- should work even with scoped type variables


-- used to not work (because I have not implemented it) but now it works (because I just did)
-- ; data Rec a = Rec { x :: Int, y :: a }
-- ; rec1 = Rec{ x = 23, y = 'a' }
-- ; justX Rec{ x = x } = x


}