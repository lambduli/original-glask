module Main where
{ infixl 5 +
; infixl 6 *
; infixr 0 $
; postfix 9 !
; prefix 3 ||>
; prefix 9 |>
; postfix 0 `terminate`
; prefixr 0 `print`

; class Num a where
  { (+) :: a -> a -> a
  ; (*) :: a -> a -> a }

; instance Num Int
; instance Num Double

; class Fractional a where
  { (/) :: a -> a -> a }

; instance Fractional Double

-- following definition has a wrongly shaped context
-- ; weird' :: Num (Maybe a) => a -> a -> a
-- ; weird' = weird'


; data Phantom a = Ph Int

; omega :: Num a => Int -> Phantom a
; omega i = Ph i

; fn'om :: Num a => b -> a
; fn'om x = 23

; arg = arg
; n     = fn'om arg
; twice _ = fn'om arg + fn'om arg

; test'om arg
  = let { n     = fn'om arg
        ; twice = n + n }
    in  arg



; a' = 23
; b' = 42
; c' = 13

; data String = String
; print :: a -> String
; print a = String
; terminate :: a -> String
; terminate a = String
; interesting = `print` a' + b'
; fn' a = a
; even'more = `print` fn' a'
; post' = a' + b' `terminate`
; (||>) a = a
; (|>) a = a
; eee = |> ||> a' + b'


; pat'test (a :: Int) = a


; infix'test = \ a b c -> a + b * c

; data Bool = True | False

; data Maybe a = Nothing | Just a

-- NOT BROKEN ANYMORE
; int = 23
; num :: Num a => a
; num = 23

; lam'test = \ a -> a + a

; cool'num 23 = True
; cool'num 42 = True
; cool'num _ = False

; ($) :: (a -> b) -> a -> b
; ($) fn a = fn a
-- ; ($) = \ fn a -> fn a

; tttest = cool'num $ 23 + 42

-- NOW I WANT TO TEST FINDING A VARIABLE NOT IN SCOPE
-- ; not'in :: a -> b -> Int
-- ; not'in = \ _ y -> _

; tru = True

; lambda = \ a b c -> c

; data Pair x y = Pair x y

; aaa :: Bool -> Maybe Bool -> Char
; aaa = \ b m'b -> 'Y'

; rank' :: forall b c . (forall x . x -> x) -> b -> c -> Char
; rank' = \ fn b c -> (aaa (fn True)) (fn (Just False))

; data A = A
; data B = B
; data C = C

; test = ((rank' (\ i -> i)) A) B


; identity :: forall i . i -> i
; identity = \ i -> i

; data Value a = Val a

; a = Val identity

; data Pair a b = P a b

-- THIS FAILS BECAUSE IMPREDICATIVE TYPES ARE NOT SUPPORTED
-- ; foo'a :: Value (forall a . a -> a) -> Pair Bool Char
-- ; foo'a = \ (Val fn) -> (P (fn True)) (fn 'c')


-- ; test' :: Maybe a -> Maybe C
; test' = let { loc :: C -> Maybe a -> Maybe C
              ; loc = \ i ma -> Just i }
          in loc C

; test'' = test' Nothing


; data Int' = Int'

; t :: Int' -> forall a . Int' -> a -> a -> Int' -- THIS VERSION IS OK
; t = \ i i' a a' -> i
-- ; t = undefined
-- ; t = t
--

-- WHAT ARE THOSE TWO?
-- ; t :: Int' -> (forall a . Int' -> a -> a) -> Int'
-- ; t = \ i fn -> i


; e :: Int' -> Int' -> forall a . a -> a -> Int' -- THIS VERSION IS OK
; e = (\ i i' a a' -> i)
--

-- what if I float out the forall completely?
; g :: Int' -> Int' -> a -> a -> Int'
; g = \ i i' a a' -> i

-- WHAT ARE THOSE TWO?
-- ; e :: Int' -> (Int' -> forall a . a -> a) -> Int'
-- ; e = (\ i fn -> i)

-- this shouldn't work with the versions NOT marked as OK

; iif = if True then t else e
; iif' = if True then t else if False then e else g



; undefined = undefined

; foo :: a -> a -> Int'
; foo = let { fn :: m -> n -> Int'
            ; fn = \ m n -> Int' }
        in fn


-- -- THIS SHOULD NOT WORK
-- ; impre'maybe :: Maybe (forall a . a -> a)
-- ; impre'maybe = impre'maybe -- this DOES NOT fail
-- -- ; impre'maybe = undefined -- this fails
-- -- ; impre'maybe = Just (\ i -> i) -- this fails
-- 

-- ; one :: Int -> (forall x . x -> x) -> Int
-- ; one = one

-- ; two :: Char -> (forall z . z -> z) -> Char
-- ; two = two

-- ; test = (one 23) two -- the type error for this expression doesn't even make sense
-- Error: [Shape] Couldn't match type `t` :: * with `Char` :: *
-- what is up with Char?
-- I think it makes sense now


-- this behaves correctly I think
-- ; one :: Int -> a -> Int
-- ; one = one
-- 
-- ; two :: Char -> (forall z . z -> z) -> Char
-- ; two = two
-- 
-- ; test = (one 23) two


---------------------------------------------
-- this works fine
-- ; one :: Int -> ((forall x . x -> x) -> Char) -> Int
-- ; one = one
-- ; two :: (forall z . z -> z) -> Char
-- ; two = two
-- ; test = (one 23) two


--------------------------------------------
-- simple wrong test
-- ; simple'fn :: Char -> Bool
-- ; simple'fn = \ c -> True
-- ; bad'bad = simple'fn True


}