{ infixr 5 ++

; (++) :: [a] -> [a] -> [a]
; (++) [] ls = ls
; (++) as [] = as
; (++) (a : as) bs = a : as ++ bs
  
; class Num a

; instance Num Int

; class Fractional a

; instance Fractional Double

; undefined = undefined

; concat'map'with :: [b] -> (a -> [b]) -> [a] -> [b]
; concat'map'with _ _ [] = []
; concat'map'with separator mapping (a : [])
  = mapping a 
; concat'map'with separator mapping (a : as)
  = let { a'  = mapping a
        ; as' = concat'map'with separator mapping as
        ; all = a' ++ separator ++ as' }
    in  all



; data Pair a b = MkPair a b


; class Show a where
  { show :: a -> [Char]
  ; show'list :: [a] -> [Char] }

; instance Show a => Show [a] where
  { show items = show'list items
  ; show'list = undefined }

; instance Show Bool where
  { show True = "True"
  ; show False = "False"
  ; show'list bools = "[" ++ concat'map'with ", " show bools ++ "]" } -- problematic

; instance Show Char where
  { show ch = [ch]
  ; show'list [] = ""
  ; show'list (ch : chs) = show ch ++ show'list chs }

; instance Show Int where
  { show n = int#show n
  ; show'list ints = "[" ++ concat'map'with ", " show ints ++ "]" } -- problematic

; instance (Show a, Show b) => Show (Pair a b) where
  { show (MkPair a b) = "MkPair " ++ show a ++ " " ++ show b -- problematic
  ; show'list x = show'list x }

-- SO THOSE COMMENTED OUT NOW CAUSE A TYPE ERROR
-- IT COMPLAINS THAT THE OUTER CONTEXT ... something something ...

; not'a'method :: (Show a, Show b) => Pair a b -> [Char]
; not'a'method (MkPair a b) = "MkPair " ++ show a
-- fails for now

; an'example :: Show a => a -> [Char]
; an'example a = show a ++ "."


-- ; zeros = 0 : zeros

; data Bool = False | True

-- ; data Pair a b = Pair a b
-- 
-- ; f' :: forall a b . (forall a . a -> a) -> (a, b) -> (a, b)
-- ; f' g (x, y) = ((g x), (g y))


-- ; fst :: (a, b) -> a
-- ; fst (a, b) = a
-- 
-- 
-- ; class Foo a where
--   { foo :: a -> a }
-- 
-- ; instance Foo Int where
--   { foo x = 1 }
-- 
-- ; instance Foo Char where
--   { foo _ = 'a' }


-- ; f' :: (Char -> Char) -> Char -> Char
-- ; f' g c = g c
-- ; a'' = f' foo 'a'
-- 
-- ; f'' :: (Foo a, Foo b) => (forall a . Foo a => a -> a) -> (Pair a b) -> (Pair a b)
-- ; f'' g (MkPair x y) = (MkPair (g x) (g y))
-- 
-- ; y'' = f'' foo (MkPair (42 :: Int) 'z')
-- 
-- ; x'' = f'' (\ x -> foo x) (MkPair (23 :: Int) 'b')










; class Add a where
{ add :: a -> a -> a }

; takes :: (forall x . x -> x) -> a -> a
; takes fn a = fn a


; given :: Add a => a -> a
; given a = add a a



; wants :: (forall x . x -> x) -> a -> a
; wants fn a = fn a
; correct _ = wants ((\ i -> i) :: forall e . e -> e)

-- ; xyz _ = takes (given :: (forall x . x -> x)) -- this needs to fail but it DOESN'T !!!
-- IT DOES FAIL NOW
-- and no longer infers:
-- xyz :: (forall a b . a -> b -> b)

-- it would be a problem for two reasons
-- the one related to contexts is that the function `takes`
-- expects a function that is applied to a single thing
-- but would be given a function that expects also a dictionary before the argument

-- let's try simpler version of it
-- ; xyz'1 _ = (given :: (forall x . x -> x)) -- this needs to fail but it STILL DOESN'T !!!
-- ; xyz'2 _ = ((given :: Add a => a -> a) :: (forall x . x -> x)) -- this needs to fail but it STILL DOESN'T !!!
-- ; xyz'3 _ = ((undefined :: Add a => a -> a) :: (forall x . x -> x)) -- this finally breaks
-- ; xyz'4 _ = (((\ x -> x) :: Add a => a -> a) :: (forall x . x -> x)) -- this finally breaks
-- so I think there's something wrong with instantiation
-- ALL OF THEM FAIL NOW



-- so what about the other way around?
-- what if the one expecting thinks there will be more dictionaries but the one given expects fewer?





-- ; takes' :: (forall x . Num x => x -> x) -> a -> a
-- ; takes' fnumx a = fnumx a -- I think this will force `a` to be qualified with Num too
-- -- yes, that's what happens
-- -- so it does not type check
-- -- so no problem when dictionary passing
-- 
-- ; given' :: a -> a
-- ; given' a = a
-- 
-- ; xyz' _ = takes' given' -- this should fail and it DOES !


-- ; function x = (((\ i -> i) :: forall x . Add x => x -> x) :: forall y . y -> y) -- this should fail to type check
-- OK THIS ONE FAILS NOW



}
